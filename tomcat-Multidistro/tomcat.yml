---
- name: installing tomcat on ubuntu server 
  hosts: all
  become: yes
  tasks:
    - name: install openjdk-11
      ansible.builtin.package:
        name: "{{java_package_name}}"
        state: present
    - name: creating the tomcat group
      ansible.builtin.group:
        name: "{{user_group}}"
        state: present
    - name: creating the tomcat user 
      ansible.builtin.user:
        name: "{{ user_name}}"
        group: "{{ user_group}}"
        create_home: true
        home: "{{user_home}}"
        shell: "{{ user_shell}}"
        state: present
    - name: tomcat stats
      ansible.builtin.stat:
        path: "{{ user_home}}/latest/bin/startup.sh"
      register: tomcat_startup
    - name: unzip the tomcat tar file
      ansible.builtin.unarchive:
        src: https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz
        remote_src: yes
        dest: "{{ user_home }}"
      when: not tomcat_startup.stat.exists
    - name: creating a symbolic link
      ansible.builtin.file:
        src: /opt/tomcat/apache-tomcat-10.0.27
        dest: /opt/tomcat/latest
        owner: "{{ user_name}}"
        group: "{{ user_group}}"
        state: link 
    - name: granting the premissions
      ansible.builtin.file:
        dest: /opt/tomcat/latest
        owner: "{{ user_name}}"
        group: "{{ user_group}}"
        recurse: yes
        state: directory
    - name: giving executable premissions
      ansible.builtin.shell: sudo sh -c 'chmod +x /opt/tomcat/latest/bin/*.sh'
      when: not  tomcat_startup.stat.exists 
    - name: copy the tomcat.service file 
      ansible.builtin.template:
        src: tomcat.service.j2
        dest: /etc/systemd/system/tomcat.service
        owner: "{{ user_name}}"
        group: "{{ user_group}}"
      when: ansible_facts['distribution'] == "Ubuntu"
      notify:
        - enable and reload the tomcat  
    - name: copy the user.xml file
      ansible.builtin.template:
        src: tomcat-users.xml.j2
        dest: /opt/tomcat/latest/conf/tomcat-users.xml
        owner: "{{ user_name}}"
        group: "{{ user_group}}"
    - name: copy the context.xml file
      ansible.builtin.copy:
        src: context.xml
        dest: "{{ item }}"
        owner: "{{ user_name}}"
        group: "{{ user_group}}" 
      loop:
        - /opt/tomcat/latest/webapps/manager/META-INF/context.xml
        - /opt/tomcat/latest/webapps/host-manager/META-INF/context.xml 
      notify:
        - restart tomcat
  handlers:
    - name: restart tomcat
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: restarted
    - name: enable and reload the tomcat 
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        daemon_reload: true
        enabled: true
        state: restarted